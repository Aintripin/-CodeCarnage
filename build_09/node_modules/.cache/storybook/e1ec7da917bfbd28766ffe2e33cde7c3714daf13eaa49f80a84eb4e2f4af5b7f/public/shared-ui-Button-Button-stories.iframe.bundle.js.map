{"version":3,"file":"shared-ui-Button-Button-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AAEA;;AAAA;AAEA;AAOA;AACA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA","sources":["webpack://production-project/./src/shared/ui/Button/Button.stories.tsx","webpack://production-project/./src/shared/lib/classNames/classNames.ts","webpack://production-project/./src/shared/ui/Button/Button.tsx"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\nimport { fn } from '@storybook/test';\n\nimport { Button } from './Button';\n\nexport default {\n    title: 'shared/Button',\n    component: Button,\n    argTypes: {\n        backgroundColor: { control: 'color' },\n    },\n} as ComponentMeta<typeof Button>;\n\nconst Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;\n\nexport const Primary = Template.bind({});\n\nPrimary.args = {\nprimary: true,\nlabel: 'Button',\n}\n\n\n\n","type Mods = Record<string, boolean | string>\n\nexport function classNames(cls: string, mods: Mods = {}, additional: string[] = []): string {\n    return [\n        cls,\n        ...additional.filter(Boolean),\n        ...Object.entries(mods)\n            .filter(([_, value]) => Boolean(value))\n            .map(([className]) => className),\n    ]\n        .join(' ');\n}\n","import { classNames } from 'shared/lib/classNames/classNames';\nimport { ButtonHTMLAttributes, FC } from 'react';\nimport cls from './Button.module.scss';\n\nexport enum ThemeButton {\n    CLEAR = 'clear',\n}\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>{\n    className?: string;\n    theme?: ThemeButton;\n}\n\nexport const Button: FC<ButtonProps> = (props) => {\n    const {\n        className,\n        children,\n        theme,\n        ...otherProps\n    } = props;\n\n    return (\n        <button\n            type=\"button\"\n            className={classNames(cls.Button, { [cls[theme]]: true }, [className])}\n            {...otherProps}\n        >\n            {children}\n        </button>\n    );\n};\n"],"names":[],"sourceRoot":""}