{"version":3,"file":"shared-ui-Button-Button-stories.fe9928e8778a2b98afe1.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AAEA;AAEA;;AAAA;AAEA;AAOA;AACA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA","sources":["webpack://production-project/./src/shared/ui/Button/Button.stories.tsx","webpack://production-project/./src/shared/ui/Button/Button.tsx"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\r\nimport { fn } from '@storybook/test';\r\n\r\nimport { Button } from './Button';\r\n\r\n// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export\r\nconst meta: Meta<typeof Button> = {\r\n    title: 'Example/Button',\r\n    component: Button,\r\n    parameters: {\r\n        // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout\r\n        layout: 'centered',\r\n    },\r\n    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n    tags: ['autodocs'],\r\n    // More on argTypes: https://storybook.js.org/docs/api/argtypes\r\n    argTypes: {\r\n        backgroundColor: { control: 'color' },\r\n    },\r\n    // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n    args: { onClick: fn() },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<typeof Button>;\r\n\r\n// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args\r\nexport const Primary: Story = {\r\n    args: {\r\n        primary: true,\r\n        label: 'Button',\r\n    },\r\n};\r\n\r\nexport const Secondary: Story = {\r\n    args: {\r\n        label: 'Button',\r\n    },\r\n};\r\n\r\nexport const Large: Story = {\r\n    args: {\r\n        size: 'large',\r\n        label: 'Button',\r\n    },\r\n};\r\n\r\nexport const Small: Story = {\r\n    args: {\r\n        size: 'small',\r\n        label: 'Button',\r\n    },\r\n};\r\n","import { classNames } from 'shared/lib/classNames/classNames';\nimport { ButtonHTMLAttributes, FC } from 'react';\nimport cls from './Button.module.scss';\n\nexport enum ThemeButton {\n    CLEAR = 'clear',\n}\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement>{\n    className?: string;\n    theme?: ThemeButton;\n}\n\nexport const Button: FC<ButtonProps> = (props) => {\n    const {\n        className,\n        children,\n        theme,\n        ...otherProps\n    } = props;\n\n    return (\n        <button\n            type=\"button\"\n            className={classNames(cls.Button, { [cls[theme]]: true }, [className])}\n            {...otherProps}\n        >\n            {children}\n        </button>\n    );\n};\n"],"names":[],"sourceRoot":""}